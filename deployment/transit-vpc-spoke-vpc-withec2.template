{
  "AWSTemplateFormatVersion" : "2010-09-09",

  "Description" : "(SO0001s) - Transit VPC spoke with ec2: Creates a spoke VPC for TransitVPC testing.",

  "Parameters" : {
    "PreferredPathTag" : {
      "Description" : "Tag to use to configure a preferred CSR VPN endpoint to control traffic flow through the Transit VPC CSRs (e.g. when integrating with stateful on-prem firewalls).",
      "Type" : "String",
      "Default" : "transitvpc:preferred-path"
    },
    "PreferredPathValue" : {
      "Description" : "Specify if there is a preferred CSR to control the traffic flow through the Transit VPC (e.g. when integrating with stateful on-prem firewalls).",
      "Type" : "String",
      "Default" : "none",
      "AllowedValues" : [ "none", "CSR1", "CSR2" ]
    },
    "HubTag" : {
      "Description" : "Tag to use to identify hub VPCs to connect to Transit VPC.",
      "Type" : "String",
      "Default" : "transitvpc:spoke"
    },
    "HubTagValue" : {
      "Description" : "Tag value to use to identify hub VPCs to connect to Transit VPC.",
      "Type" : "String",
      "Default" : "true"
    },
    "VpcCidr" : {
      "Description" : "CIDR block for spoke VPC.",
      "Type" : "String",
      "Default" : "10.255.0.0/16"
    },
    "SSHCidr" : {
      "Description" : "IP address or range for SSH access to EC2 instance (needs to be a CIDR block such as 123.123.123.123/32).",
      "Type" : "String"
    },
    "IcmpCidr" : {
      "Description" : "IP address or range for allowing ICMP requests for the EC2 instance.",
      "Type" : "String",
      "Default" : "10.0.0.0/8"
    },
    "KeyName": {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
    },
    "InstanceType" : {
      "Description" : "EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t2.nano", "t2.micro", "t2.small", "t2.medium", "t2.large", "m1.small", "m1.medium", "m1.large", "m1.xlarge", "m2.xlarge", "m2.2xlarge", "m2.4xlarge", "m3.medium", "m3.large", "m3.xlarge", "m3.2xlarge", "m4.large", "m4.xlarge", "m4.2xlarge", "m4.4xlarge", "m4.10xlarge", "c1.medium", "c1.xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge", "c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "g2.2xlarge", "g2.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge", "i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge", "hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge", "cg1.4xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    }

  },
  "Metadata" : {
    "AWS::CloudFormation::Interface" : {
     "ParameterGroups" : [
      {
        "Label" : { "default":"EC2 Configuration" },
        "Parameters" : [ "KeyName", "InstanceType", "SSHCidr", "IcmpCidr" ]
      },
      {
        "Label" : { "default" : "Network Configuration" },
        "Parameters" : [ "VpcCidr", "HubTag","HubTagValue", "PreferredPathTag","PreferredPathValue" ]
      }
     ],
     "ParameterLabels" : {
      "HubTag" : { "default" : "Transit VPC Tag Name" },
      "HubTagValue" : { "default" : "Transit VPC Tag Value" },
      "PreferredPathTag" : { "default" : "Preferred VPN Endpoint Tag Name" },
      "PreferredPathValue" : { "default" : "Preferred Path" },
      "KeyName" : { "default" : "EC2 Key Pair" },
      "InstanceType" : { "default" : "EC2 Instance Type" },
      "SSHCidr" : { "default" : "Enable SSH From" },
      "IcmpCidr" : { "default" : "Enable ICMP From" },
      "VpcCidr" : { "default" : "Spoke VPC CIDR Block" }
     }
    }
  },
  "Mappings" : {
    "EC2AMI" : {
      "us-east-1"        : {"AMI" : "ami-c481fad3"},
      "us-east-2"        : {"AMI" : "ami-71ca9114"},
      "us-west-2"        : {"AMI" : "ami-b04e92d0"},
      "us-west-1"        : {"AMI" : "ami-de347abe"},
      "eu-west-1"        : {"AMI" : "ami-d41d58a7"},
      "eu-central-1"     : {"AMI" : "ami-0044b96f"},
      "ap-southeast-1"   : {"AMI" : "ami-7243e611"},
      "ap-northeast-2"   : {"AMI" : "ami-a04297ce"},
      "ap-northeast-1"   : {"AMI" : "ami-1a15c77b"},
      "ap-southeast-2"   : {"AMI" : "ami-55d4e436"},
      "ap-south-1"       : {"AMI" : "ami-cacbbea5"},
      "sa-east-1"        : {"AMI" : "ami-b777e4db"}
    },
    "LogRetention" : {
      "Period" : { "Days" : 90 }
    }
  },

  "Resources" : {
    "SpokeVPC" : {
      "Type" : "AWS::EC2::VPC",
      "Properties" : {
        "CidrBlock" : { "Ref" : "VpcCidr" },
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join": ["", [ { "Ref" : "AWS::StackName" }, " Spoke VPC"]] } }
        ]
      }
    },
    "VPCRouteTable" : {
      "Type" : "AWS::EC2::RouteTable",
      "Properties" : {
        "VpcId" : { "Ref" : "SpokeVPC" },
        "Tags" : [
          { "Key" : "Network", "Value" : "Public" },
          { "Key" : "Name", "Value" : { "Fn::Join": ["", [ { "Ref" : "AWS::StackName" }, " Route Table"]] } }
        ]
      }
    },
    "IGW" : {
      "Type" : "AWS::EC2::InternetGateway",
      "Properties" : {
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join": ["", [ { "Ref" : "AWS::StackName" }, " IGW"]] } }
        ]
      }
    },
    "IGWToInternet" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "SpokeVPC" },
         "InternetGatewayId" : { "Ref" : "IGW" }
       }
    },
    "VPCPublicRoute" : {
      "Type" : "AWS::EC2::Route",
      "Properties" : {
        "RouteTableId" : { "Ref" : "VPCRouteTable" },
        "DestinationCidrBlock" : "0.0.0.0/0",
        "GatewayId" : { "Ref" : "IGW" }
      }
    },
    "VGW" : {
      "Type" : "AWS::EC2::VPNGateway",
      "Properties" : {
	"Type" : "ipsec.1",
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join": ["", [ { "Ref" : "AWS::StackName" }, " VGW"]] } },
          { "Key" : { "Ref" : "PreferredPathTag" }, "Value" : { "Ref" : "PreferredPathValue" }},
          { "Key" : { "Ref" : "HubTag" }, "Value" : { "Ref" : "HubTagValue" }}
        ]
      }
    },
    "AttachVGWToVPC" : {
       "Type" : "AWS::EC2::VPCGatewayAttachment",
       "Properties" : {
         "VpcId" : { "Ref" : "SpokeVPC" },
         "VpnGatewayId" : { "Ref" : "VGW" }
       }
    },
    "ProgagateRoute" : {
     "DependsOn" : "AttachVGWToVPC",
      "Type" : "AWS::EC2::VPNGatewayRoutePropagation",
      "Properties" : {
        "RouteTableIds" : [ { "Ref" : "VPCRouteTable" } ],
        "VpnGatewayId" : { "Ref" : "VGW" }
      }
    },
    "VPCPubSub" : {
      "Type" : "AWS::EC2::Subnet",
      "Properties" : {
        "VpcId" : { "Ref" : "SpokeVPC" },
        "CidrBlock" : { "Ref" : "VpcCidr" },
        "AvailabilityZone" : { "Fn::Select": ["0", {"Fn::GetAZs": ""}] },
        "Tags" : [
          { "Key" : "Network", "Value" : "Public" },
          { "Key" : "Name", "Value" : { "Fn::Join": ["", [ { "Ref" : "AWS::StackName" }, " Subnet"]] } }
        ]
      }
    },

    "VPCPubSubnetRouteTableAssociation" : {
      "Type" : "AWS::EC2::SubnetRouteTableAssociation",
      "Properties" : {
        "SubnetId" : { "Ref" : "VPCPubSub" },
        "RouteTableId" : { "Ref" : "VPCRouteTable" }
      }
    },

    "EC2Instance" : {
      "Type" : "AWS::EC2::Instance",
      "Properties" : {
        "ImageId" : { "Fn::FindInMap" : [ "EC2AMI", { "Ref" : "AWS::Region" }, "AMI" ] },
        "InstanceType" : { "Ref" : "InstanceType" },
        "Tags" : [
          { "Key" : "Name", "Value" : { "Fn::Join": ["", [ { "Ref" : "AWS::StackName" }, " - ", "Test Instance"]] } }
        ],
        "SubnetId" : { "Ref" : "VPCPubSub" },
		"SecurityGroupIds" : [{ "Ref" : "InstanceSecurityGroup" }],
        "KeyName" : { "Ref" : "KeyName" }
        }
    },

    "InstanceSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "GroupDescription" : "Enable SSH access via port 22",
        "VpcId" : { "Ref" : "SpokeVPC"},
        "SecurityGroupIngress" : [ {
          "Description": "Security rule for inbound TCP traffic",
          "IpProtocol" : "tcp",
          "FromPort" : "22",
          "ToPort" : "22",
          "CidrIp" : { "Ref" : "SSHCidr" }
        },
        {
          "Description": "Security rule for ICMP protocol",
          "IpProtocol" : "icmp",
          "FromPort" : "-1",
          "ToPort" : "-1",
          "CidrIp" : { "Ref" : "IcmpCidr" }
        } ],
        "SecurityGroupEgress": [
          {
            "Description": "Security rule for outbound traffic",
            "IpProtocol": "-1",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      },
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W40",
              "reason": "IpProtocol -1 used to allow all traffic. We recommend that you review the security groups and further restrict access as needed once the deployment is up and running"
            },
            {
              "id": "W5",
              "reason": "Open CIDR used to connect to any VPC."
            }
          ]
        }
      }
    },
    "EC2Eip" : {
      "Type" : "AWS::EC2::EIP",
      "Properties" : {
        "Domain" : "vpc",
	"InstanceId" : { "Ref" : "EC2Instance" }
      }
    },
    "FlowLog": {
      "Type": "AWS::EC2::FlowLog",
      "Properties": {
        "ResourceId": {
          "Ref": "SpokeVPC"
        },
        "ResourceType": "VPC",
        "TrafficType": "ALL",
        "DeliverLogsPermissionArn": {
          "Fn::GetAtt": [
            "RoleFlowLogs",
            "Arn"
          ]
        },
        "LogGroupName": {
          "Ref": "AWS::StackName"
        }
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain"
    },
    "RoleFlowLogs": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "vpc-flow-logs.amazonaws.com"
              }
            }
          ],
          "Version": "2012-10-17"
        }
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain"
    },
    "FlowLogPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "logs:CreateLogStream",
                "logs:DescribeLogStreams",
                "logs:PutLogEvents",
                "logs:CreateLogGroup",
                "logs:DescribeLogGroups"
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "LogGroupFlowLogs",
                  "Arn"
                ]
              }
            }
          ],
          "Version": "2012-10-17"
        },
        "PolicyName": "FlowLogPolicy",
        "Roles": [
          {
            "Ref": "RoleFlowLogs"
          }
        ]
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain"
    },
    "LogGroupFlowLogs": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": {
          "Ref": "AWS::StackName"
        },
        "RetentionInDays": { "Fn::FindInMap" : [ "LogRetention", "Period", "Days"]}
      },
      "UpdateReplacePolicy": "Retain",
      "DeletionPolicy": "Retain",
      "Metadata": {
        "cfn_nag": {
          "rules_to_suppress": [
            {
              "id": "W84",
              "reason": "CloudWatch logs are encrypted by the service"
            }
          ]
        }
      }
    }
  },
  "Outputs" : {
    "VPCID" : {
      "Description" : "VPC ID",
      "Value" : { "Ref" : "SpokeVPC" }
    },
    "CIDR" : {
      "Description" : "VPC CIDR",
      "Value" : { "Ref" : "VpcCidr" }
    },
    "VGWID" : {
      "Description" : "VGW ID",
      "Value" : { "Ref" : "VGW" }
    },
    "TransitVPCtags" : {
      "Description" : "Tag name/value",
      "Value" : { "Fn::Join": [ "", [ { "Ref" : "HubTag" }, " = ", { "Ref": "HubTagValue" } ] ] }
    },
    "TransitVPCPath" : {
      "Description" : "Tag name/value",
      "Value" : { "Fn::Join": [ "", [ { "Ref" : "PreferredPathTag" }, " = ", { "Ref": "PreferredPathValue" } ] ] }
    },
    "EC2IP" : {
      "Description" : "IP Address for EC2Instance",
      "Value" : { "Fn::GetAtt" : [ "EC2Instance", "PublicIp" ] }
    },
    "EC2PrivateIP" : {
      "Description" : "IP Address for EC2Instance",
      "Value" : { "Fn::GetAtt" : [ "EC2Instance", "PrivateIp" ] }
    }
  }
}
